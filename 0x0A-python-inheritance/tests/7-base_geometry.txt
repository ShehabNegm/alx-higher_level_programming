"""
this file is to test class base geometery
"""

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("side", "lol")
Traceback (most recent call last):
TypeError: side must be an integer

>>> bg1 = BaseGeometry()
>>> bg1.integer_validator("subzero", -1)
Traceback (most recent call last):
ValueError: subzero must be greater than 0

>>> bg2 = BaseGeometry()
>>> bg2.integer_validator("iamzero", 0)
Traceback (most recent call last):
ValueError: iamzero must be greater than 0

>>> bg3 = BaseGeometry()
>>> bg2.integer_validator("iamfine", 16)

>>> bg4 = BaseGeometry()
>>> bg2.integer_validator("", True)
Traceback (most recent call last):
TypeError:  must be an integer

>>> bg5 = BaseGeometry()
>>> print(bg5.area())
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
TypeError: BaseGeometry() takes no arguments

>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(None)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator({"this is a lot": 98}, [1, 2])
Traceback (most recent call last):
TypeError: {'this is a lot': 98} must be an integer

>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

>>> print(bg.area) # doctest: +ELLIPSIS
<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at...>>

>>> bg.integer_validator("invd", (6777,12))
Traceback (most recent call last):
TypeError: invd must be an integer

>>> bg.integer_validator("am None", None)
Traceback (most recent call last):
TypeError: am None must be an integer





